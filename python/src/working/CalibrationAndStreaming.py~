import zmq
import msgpack 
import sys
import json
import jsonpickle
import socket
import time
import cv2
import numpy as np

#establish connection to device with pupil labs
def establishConnToPupil():
	
	context = zmq.Context()
	
	addr = "127.0.0.1"
	
	req_port = "50020"
	req = context.socket(zmq.REQ)
	req.connect("tcp://"+addr+":"+req_port)
	req.send("SUB_PORT")
	
	sub_port = req.recv()
	sub = context.socket(zmq.SUB)
	sub.connect("tcp://"+addr+":"+sub_port)

	return sub

# gets the msgs from the established connection
#def getmsg(topic):
def getmsg(sub)	
	#sub = establishConnToPupil()
	#sub.setsockopt(zmq.SUBSCRIBE,topic)
	topic,msg = sub.recv_multipart()
	msg = msgpack.loads(msg)

	return msg

#gets the coordinates
def getGazePoint(msg):
	gazePoint = msg.get('norm_pos')
	return gazePoint
	
	
#gets the base from the msg
def getMsgBase(msg):
	msgBase = msg.get('base_data')[0] #because it is a list, we need to get the first element i.e, 0
	return msgBase
	
#gets raw gaze data
def getRawGazePoint(msgBase):
	rawGazePoint = msgBase.get('norm_pos')
	return rawGazePoint
	
#gets the confidence of detection
def getConf(msgBase):
	conf = msgBase.get('confidence')
	return conf
	
#Initialize UDP Ports
def initializeSocket():

	sock = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
	return sock

#calibrate to get the homography matrix
def calculate_homography(msgData):
	dest_points = np.array([(0.1,0.9),(0.5,0.9),(0.9,0.9),(0.1,0.5),(0.5,0.5),(0.9,0.5),(0.1,0.1),(0.5,0.1),(0.9,0.1)]);
	
	# extract source_points from data
	src_points = np.array(msgData)

	homography_matrix,mask = cv2.findHomography(src_points,dest_points,CV_RANSAC)
	return (homography_matrix)
			
	
#the main function
def main():
	UDP_IP = "127.0.0.1"
	UDP_PORT = 8000
	UDP_PORT_LISTEN = 8001

	sock_send = initializeSocket()
	sock_listen = initializeSocket()
	sock_listen.bind(((UDP_IP,UDP_PORT_LISTEN))
	
	sub = establishConnToPupil()
	sub.setsockopt(zmq.SUBSCRIBE,"gaze")
	
	while (True):
		msg = getmsg(sub)
		msgBase = getMsgBase(msg)
		
		conf = getConf(msgBase)			
		xy_coord = getRawGazePoint(msgBase)
		
		if(float(conf)>=0.98):
			print(str(xy_coord[0]+","+xy_coord[1]))
			xy_toSend = msgpack.dumps(xy_coord)
			sock_send.sendto(xy_toSend,(UDP_IP,UDP_PORT))

		data,addr = sock_listen.recvfrom(1024)
		if(data!=None):
			msgData = msgpack.loads(data)
			break

	homography_matrix = calculate_homography(msgData)
	

#start sending calibrated points
	while (True):
		msg = getmsg(sub)
		msgBase = getMsgBase(msg)
		
		conf = getConf(msgBase)			
		xy_coord = getRawGazePoint(msgBase)
		
		if(float(conf)>=0.98):
			mat_point = np.array([xy_coord[0],xy_coord[1],1])
			calibrated_point_mat = np.dot(homography_matrix,mat_point)
			calibrated_point = [calibrated_point_mat[0]/calibrated_point_mat[2],calibrated_point_mat[1]/calibrated_point_mat[2]]
 			xy_toSend = msgpack.dumps(calibrated_point)
			sock_send.sendto(xy_toSend,(UDP_IP,UDP_PORT))		


if __name__ == "__main__":
	main()

